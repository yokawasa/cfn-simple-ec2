Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC settings
        Parameters:
          - IPv4CIDR
      - Label:
          default: EC2 settings
        Parameters:
          - KeyPairName
          - AllowedIP
    ParameterLabels:
      IPv4CIDR:
        default: The Prefix of IPv4 CIDR
      KeyPairName:
        default: EC2 Key Pair Name
      AllowedIP:
        default: IP Address to allow access from (CIDR format)
Parameters:
  IPv4CIDR:
    Type: String
    Default: "10.1"
    AllowedPattern: ^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
    Description: The subnet CIDR prefix, such as 10.1, defaults to a subnet mask of /16.
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
  AllowedIP:
    Type: String
    Default: "0.0.0.0/0"
    Description: The IP address range that can access the EC2 instance (CIDR format, e.g. 203.0.113.0/24)
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        IPv4CIDR:
          Ref: IPv4CIDR
      TemplateURL: https://aws-gcr-solutions.s3.amazonaws.com/WCH-TEST/trackingemailengagement/template/ThreeLayerSubnets.template.json
  PublicSecurityGroupfrom080:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: !Ref AllowedIP
      Description: Allow HTTP access from specified IP
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - VPC
          - Outputs.PublicSecurityGroupId
      IpProtocol: tcp
      ToPort: 80
  PublicSecurityGroupSSHAccess:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: !Ref AllowedIP
      Description: Allow SSH access from specified IP
      FromPort: 22
      GroupId:
        Fn::GetAtt:
          - VPC
          - Outputs.PublicSecurityGroupId
      IpProtocol: tcp
      ToPort: 22
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IamInstanceProfileRole
  IamInstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
  InstallationInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyPairName
      IamInstanceProfile:
        Fn::Select:
          - 1
          - Fn::Split:
              - /
              - Fn::GetAtt:
                  - IamInstanceProfile
                  - Arn
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64}}"
      # InstanceType: t3.micro ## doesn't support arm64 arch (but x86_64)
      InstanceType:  t4g.micro
      SecurityGroupIds:
        - Fn::GetAtt:
            - VPC
            - Outputs.PublicSecurityGroupId
      SubnetId:
        Fn::Select:
          - 0
          - Fn::Split:
              - ","
              - Fn::GetAtt:
                  - VPC
                  - Outputs.PublicSubnetIds
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp3
      UserData:
        Fn::Base64: |-
          #!/bin/bash

          yum install git docker -y && systemctl start docker && systemctl enable docker
          curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose
          usermod -aG docker ec2-user
      Tags:
        - Key: Name
          Value: dify-server
    DependsOn:
      - IamInstanceProfile
Outputs:
  Host:
    Description: Host
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - InstallationInstance
              - PublicIp
          - :80
  SSHCommand:
    Description: SSH Command to connect to the EC2 instance
    Value:
      Fn::Join:
        - ""
        - - "ssh -i "
          - !Ref KeyPairName
          - ".pem ec2-user@"
          - Fn::GetAtt:
              - InstallationInstance
              - PublicIp
